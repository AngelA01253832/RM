// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider           = "typegraphql-prisma"
  output             = "../prisma/generated/type-graphql"
  emitTranspiledCode = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//ENUMS
enum Enum_Gender {
  Hombre
  Mujer
}

enum Enum_Rol {
  Entrenador
  Atleta
  Admin
}

enum Enum_Status {
  Negado
  Autorizado
}

enum Enum_Goal {
  Tiempo
  Calorias
  Distancia
}

//NEXT AUTH
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

//MODELS

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  rol           Enum_Rol  @default(Atleta)
  accounts      Account[]
  sessions      Session[]
  Coach         Coach?
  Athlete       Athlete?
  Admin         Admin?
}

model Coach {
  id            String          @id @default(cuid())
  name          String
  lastname      String
  schoolId      String          @unique
  description   String
  scheduler     String
  KnowTrainer   String
  gender        Enum_Gender
  status        Enum_Status
  user          User            @relation(fields: [userId], references: [id])
  userId        String          @unique
  WorkoutToDo   WorkoutToDo[]
  GlobalWorkout GlobalWorkout[]
}

model Athlete {
  id            String        @id @default(cuid())
  name          String
  lastname      String
  schoolId      String        @unique
  gender        Enum_Gender
  height        Int
  user          User          @relation(fields: [userId], references: [id])
  Weights       Weight[]
  DoneWorkouts  DoneWorkout[]
  WorkoutstToDo WorkoutToDo[]
  userId        String        @unique
}

model Admin {
  id       String      @id @default(cuid())
  name     String
  lastname String
  schoolId String      @unique
  user     User        @relation(fields: [userId], references: [id])
  gender   Enum_Gender
  userId   String      @unique
}

model Weight {
  id        String   @id @default(cuid())
  weight    Float
  athlete   Athlete  @relation(fields: [athleteId], references: [id])
  date      DateTime
  athleteId String
}

model DoneWorkout {
  id        String   @id @default(cuid())
  athlete   Athlete  @relation(fields: [athleteId], references: [id])
  date      DateTime
  calories  Int
  time      Int
  distance  Float
  intensity Int
  athleteId String
}

model WorkoutToDo {
  id          String    @id @default(cuid())
  coach       Coach     @relation(fields: [coachId], references: [id])
  athlete     Athlete   @relation(fields: [athleteId], references: [id])
  date        DateTime
  indications String
  goal        Enum_Goal
  goalvalue   Int
  coachId     String
  athleteId   String
}

model GlobalWorkout {
  id          String    @id @default(cuid())
  coach       Coach     @relation(fields: [coachId], references: [id])
  indications String
  goal        String
  goalvalue   Enum_Goal
  coachId     String
}
