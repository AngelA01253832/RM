"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyInputTypesEnhanceMap = exports.applyOutputTypesEnhanceMap = exports.applyModelsEnhanceMap = exports.applyRelationResolversEnhanceMap = exports.applyArgsTypesEnhanceMap = exports.applyResolversEnhanceMap = void 0;
const tslib_1 = require("tslib");
const tslib = tslib_1.__importStar(require("tslib"));
const crudResolvers = tslib_1.__importStar(require("./resolvers/crud/resolvers-crud.index"));
const argsTypes = tslib_1.__importStar(require("./resolvers/crud/args.index"));
const actionResolvers = tslib_1.__importStar(require("./resolvers/crud/resolvers-actions.index"));
const relationResolvers = tslib_1.__importStar(require("./resolvers/relations/resolvers.index"));
const models = tslib_1.__importStar(require("./models"));
const outputTypes = tslib_1.__importStar(require("./resolvers/outputs"));
const inputTypes = tslib_1.__importStar(require("./resolvers/inputs"));
const crudResolversMap = {
    Account: crudResolvers.AccountCrudResolver,
    VerificationToken: crudResolvers.VerificationTokenCrudResolver,
    Session: crudResolvers.SessionCrudResolver,
    User: crudResolvers.UserCrudResolver,
    Coach: crudResolvers.CoachCrudResolver,
    Athlete: crudResolvers.AthleteCrudResolver,
    Admin: crudResolvers.AdminCrudResolver,
    Weight: crudResolvers.WeightCrudResolver,
    DoneWorkout: crudResolvers.DoneWorkoutCrudResolver,
    WorkoutToDo: crudResolvers.WorkoutToDoCrudResolver,
    GlobalWorkout: crudResolvers.GlobalWorkoutCrudResolver
};
const actionResolversMap = {
    Account: {
        account: actionResolvers.FindUniqueAccountResolver,
        findFirstAccount: actionResolvers.FindFirstAccountResolver,
        accounts: actionResolvers.FindManyAccountResolver,
        createAccount: actionResolvers.CreateAccountResolver,
        createManyAccount: actionResolvers.CreateManyAccountResolver,
        deleteAccount: actionResolvers.DeleteAccountResolver,
        updateAccount: actionResolvers.UpdateAccountResolver,
        deleteManyAccount: actionResolvers.DeleteManyAccountResolver,
        updateManyAccount: actionResolvers.UpdateManyAccountResolver,
        upsertAccount: actionResolvers.UpsertAccountResolver,
        aggregateAccount: actionResolvers.AggregateAccountResolver,
        groupByAccount: actionResolvers.GroupByAccountResolver
    },
    VerificationToken: {
        verificationToken: actionResolvers.FindUniqueVerificationTokenResolver,
        findFirstVerificationToken: actionResolvers.FindFirstVerificationTokenResolver,
        verificationTokens: actionResolvers.FindManyVerificationTokenResolver,
        createVerificationToken: actionResolvers.CreateVerificationTokenResolver,
        createManyVerificationToken: actionResolvers.CreateManyVerificationTokenResolver,
        deleteVerificationToken: actionResolvers.DeleteVerificationTokenResolver,
        updateVerificationToken: actionResolvers.UpdateVerificationTokenResolver,
        deleteManyVerificationToken: actionResolvers.DeleteManyVerificationTokenResolver,
        updateManyVerificationToken: actionResolvers.UpdateManyVerificationTokenResolver,
        upsertVerificationToken: actionResolvers.UpsertVerificationTokenResolver,
        aggregateVerificationToken: actionResolvers.AggregateVerificationTokenResolver,
        groupByVerificationToken: actionResolvers.GroupByVerificationTokenResolver
    },
    Session: {
        session: actionResolvers.FindUniqueSessionResolver,
        findFirstSession: actionResolvers.FindFirstSessionResolver,
        sessions: actionResolvers.FindManySessionResolver,
        createSession: actionResolvers.CreateSessionResolver,
        createManySession: actionResolvers.CreateManySessionResolver,
        deleteSession: actionResolvers.DeleteSessionResolver,
        updateSession: actionResolvers.UpdateSessionResolver,
        deleteManySession: actionResolvers.DeleteManySessionResolver,
        updateManySession: actionResolvers.UpdateManySessionResolver,
        upsertSession: actionResolvers.UpsertSessionResolver,
        aggregateSession: actionResolvers.AggregateSessionResolver,
        groupBySession: actionResolvers.GroupBySessionResolver
    },
    User: {
        user: actionResolvers.FindUniqueUserResolver,
        findFirstUser: actionResolvers.FindFirstUserResolver,
        users: actionResolvers.FindManyUserResolver,
        createUser: actionResolvers.CreateUserResolver,
        createManyUser: actionResolvers.CreateManyUserResolver,
        deleteUser: actionResolvers.DeleteUserResolver,
        updateUser: actionResolvers.UpdateUserResolver,
        deleteManyUser: actionResolvers.DeleteManyUserResolver,
        updateManyUser: actionResolvers.UpdateManyUserResolver,
        upsertUser: actionResolvers.UpsertUserResolver,
        aggregateUser: actionResolvers.AggregateUserResolver,
        groupByUser: actionResolvers.GroupByUserResolver
    },
    Coach: {
        coach: actionResolvers.FindUniqueCoachResolver,
        findFirstCoach: actionResolvers.FindFirstCoachResolver,
        coaches: actionResolvers.FindManyCoachResolver,
        createCoach: actionResolvers.CreateCoachResolver,
        createManyCoach: actionResolvers.CreateManyCoachResolver,
        deleteCoach: actionResolvers.DeleteCoachResolver,
        updateCoach: actionResolvers.UpdateCoachResolver,
        deleteManyCoach: actionResolvers.DeleteManyCoachResolver,
        updateManyCoach: actionResolvers.UpdateManyCoachResolver,
        upsertCoach: actionResolvers.UpsertCoachResolver,
        aggregateCoach: actionResolvers.AggregateCoachResolver,
        groupByCoach: actionResolvers.GroupByCoachResolver
    },
    Athlete: {
        athlete: actionResolvers.FindUniqueAthleteResolver,
        findFirstAthlete: actionResolvers.FindFirstAthleteResolver,
        athletes: actionResolvers.FindManyAthleteResolver,
        createAthlete: actionResolvers.CreateAthleteResolver,
        createManyAthlete: actionResolvers.CreateManyAthleteResolver,
        deleteAthlete: actionResolvers.DeleteAthleteResolver,
        updateAthlete: actionResolvers.UpdateAthleteResolver,
        deleteManyAthlete: actionResolvers.DeleteManyAthleteResolver,
        updateManyAthlete: actionResolvers.UpdateManyAthleteResolver,
        upsertAthlete: actionResolvers.UpsertAthleteResolver,
        aggregateAthlete: actionResolvers.AggregateAthleteResolver,
        groupByAthlete: actionResolvers.GroupByAthleteResolver
    },
    Admin: {
        admin: actionResolvers.FindUniqueAdminResolver,
        findFirstAdmin: actionResolvers.FindFirstAdminResolver,
        admins: actionResolvers.FindManyAdminResolver,
        createAdmin: actionResolvers.CreateAdminResolver,
        createManyAdmin: actionResolvers.CreateManyAdminResolver,
        deleteAdmin: actionResolvers.DeleteAdminResolver,
        updateAdmin: actionResolvers.UpdateAdminResolver,
        deleteManyAdmin: actionResolvers.DeleteManyAdminResolver,
        updateManyAdmin: actionResolvers.UpdateManyAdminResolver,
        upsertAdmin: actionResolvers.UpsertAdminResolver,
        aggregateAdmin: actionResolvers.AggregateAdminResolver,
        groupByAdmin: actionResolvers.GroupByAdminResolver
    },
    Weight: {
        weight: actionResolvers.FindUniqueWeightResolver,
        findFirstWeight: actionResolvers.FindFirstWeightResolver,
        weights: actionResolvers.FindManyWeightResolver,
        createWeight: actionResolvers.CreateWeightResolver,
        createManyWeight: actionResolvers.CreateManyWeightResolver,
        deleteWeight: actionResolvers.DeleteWeightResolver,
        updateWeight: actionResolvers.UpdateWeightResolver,
        deleteManyWeight: actionResolvers.DeleteManyWeightResolver,
        updateManyWeight: actionResolvers.UpdateManyWeightResolver,
        upsertWeight: actionResolvers.UpsertWeightResolver,
        aggregateWeight: actionResolvers.AggregateWeightResolver,
        groupByWeight: actionResolvers.GroupByWeightResolver
    },
    DoneWorkout: {
        doneWorkout: actionResolvers.FindUniqueDoneWorkoutResolver,
        findFirstDoneWorkout: actionResolvers.FindFirstDoneWorkoutResolver,
        doneWorkouts: actionResolvers.FindManyDoneWorkoutResolver,
        createDoneWorkout: actionResolvers.CreateDoneWorkoutResolver,
        createManyDoneWorkout: actionResolvers.CreateManyDoneWorkoutResolver,
        deleteDoneWorkout: actionResolvers.DeleteDoneWorkoutResolver,
        updateDoneWorkout: actionResolvers.UpdateDoneWorkoutResolver,
        deleteManyDoneWorkout: actionResolvers.DeleteManyDoneWorkoutResolver,
        updateManyDoneWorkout: actionResolvers.UpdateManyDoneWorkoutResolver,
        upsertDoneWorkout: actionResolvers.UpsertDoneWorkoutResolver,
        aggregateDoneWorkout: actionResolvers.AggregateDoneWorkoutResolver,
        groupByDoneWorkout: actionResolvers.GroupByDoneWorkoutResolver
    },
    WorkoutToDo: {
        workoutToDo: actionResolvers.FindUniqueWorkoutToDoResolver,
        findFirstWorkoutToDo: actionResolvers.FindFirstWorkoutToDoResolver,
        workoutToDos: actionResolvers.FindManyWorkoutToDoResolver,
        createWorkoutToDo: actionResolvers.CreateWorkoutToDoResolver,
        createManyWorkoutToDo: actionResolvers.CreateManyWorkoutToDoResolver,
        deleteWorkoutToDo: actionResolvers.DeleteWorkoutToDoResolver,
        updateWorkoutToDo: actionResolvers.UpdateWorkoutToDoResolver,
        deleteManyWorkoutToDo: actionResolvers.DeleteManyWorkoutToDoResolver,
        updateManyWorkoutToDo: actionResolvers.UpdateManyWorkoutToDoResolver,
        upsertWorkoutToDo: actionResolvers.UpsertWorkoutToDoResolver,
        aggregateWorkoutToDo: actionResolvers.AggregateWorkoutToDoResolver,
        groupByWorkoutToDo: actionResolvers.GroupByWorkoutToDoResolver
    },
    GlobalWorkout: {
        globalWorkout: actionResolvers.FindUniqueGlobalWorkoutResolver,
        findFirstGlobalWorkout: actionResolvers.FindFirstGlobalWorkoutResolver,
        globalWorkouts: actionResolvers.FindManyGlobalWorkoutResolver,
        createGlobalWorkout: actionResolvers.CreateGlobalWorkoutResolver,
        createManyGlobalWorkout: actionResolvers.CreateManyGlobalWorkoutResolver,
        deleteGlobalWorkout: actionResolvers.DeleteGlobalWorkoutResolver,
        updateGlobalWorkout: actionResolvers.UpdateGlobalWorkoutResolver,
        deleteManyGlobalWorkout: actionResolvers.DeleteManyGlobalWorkoutResolver,
        updateManyGlobalWorkout: actionResolvers.UpdateManyGlobalWorkoutResolver,
        upsertGlobalWorkout: actionResolvers.UpsertGlobalWorkoutResolver,
        aggregateGlobalWorkout: actionResolvers.AggregateGlobalWorkoutResolver,
        groupByGlobalWorkout: actionResolvers.GroupByGlobalWorkoutResolver
    }
};
const crudResolversInfo = {
    Account: ["account", "findFirstAccount", "accounts", "createAccount", "createManyAccount", "deleteAccount", "updateAccount", "deleteManyAccount", "updateManyAccount", "upsertAccount", "aggregateAccount", "groupByAccount"],
    VerificationToken: ["verificationToken", "findFirstVerificationToken", "verificationTokens", "createVerificationToken", "createManyVerificationToken", "deleteVerificationToken", "updateVerificationToken", "deleteManyVerificationToken", "updateManyVerificationToken", "upsertVerificationToken", "aggregateVerificationToken", "groupByVerificationToken"],
    Session: ["session", "findFirstSession", "sessions", "createSession", "createManySession", "deleteSession", "updateSession", "deleteManySession", "updateManySession", "upsertSession", "aggregateSession", "groupBySession"],
    User: ["user", "findFirstUser", "users", "createUser", "createManyUser", "deleteUser", "updateUser", "deleteManyUser", "updateManyUser", "upsertUser", "aggregateUser", "groupByUser"],
    Coach: ["coach", "findFirstCoach", "coaches", "createCoach", "createManyCoach", "deleteCoach", "updateCoach", "deleteManyCoach", "updateManyCoach", "upsertCoach", "aggregateCoach", "groupByCoach"],
    Athlete: ["athlete", "findFirstAthlete", "athletes", "createAthlete", "createManyAthlete", "deleteAthlete", "updateAthlete", "deleteManyAthlete", "updateManyAthlete", "upsertAthlete", "aggregateAthlete", "groupByAthlete"],
    Admin: ["admin", "findFirstAdmin", "admins", "createAdmin", "createManyAdmin", "deleteAdmin", "updateAdmin", "deleteManyAdmin", "updateManyAdmin", "upsertAdmin", "aggregateAdmin", "groupByAdmin"],
    Weight: ["weight", "findFirstWeight", "weights", "createWeight", "createManyWeight", "deleteWeight", "updateWeight", "deleteManyWeight", "updateManyWeight", "upsertWeight", "aggregateWeight", "groupByWeight"],
    DoneWorkout: ["doneWorkout", "findFirstDoneWorkout", "doneWorkouts", "createDoneWorkout", "createManyDoneWorkout", "deleteDoneWorkout", "updateDoneWorkout", "deleteManyDoneWorkout", "updateManyDoneWorkout", "upsertDoneWorkout", "aggregateDoneWorkout", "groupByDoneWorkout"],
    WorkoutToDo: ["workoutToDo", "findFirstWorkoutToDo", "workoutToDos", "createWorkoutToDo", "createManyWorkoutToDo", "deleteWorkoutToDo", "updateWorkoutToDo", "deleteManyWorkoutToDo", "updateManyWorkoutToDo", "upsertWorkoutToDo", "aggregateWorkoutToDo", "groupByWorkoutToDo"],
    GlobalWorkout: ["globalWorkout", "findFirstGlobalWorkout", "globalWorkouts", "createGlobalWorkout", "createManyGlobalWorkout", "deleteGlobalWorkout", "updateGlobalWorkout", "deleteManyGlobalWorkout", "updateManyGlobalWorkout", "upsertGlobalWorkout", "aggregateGlobalWorkout", "groupByGlobalWorkout"]
};
const argsInfo = {
    FindUniqueAccountArgs: ["where"],
    FindFirstAccountArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyAccountArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateAccountArgs: ["data"],
    CreateManyAccountArgs: ["data", "skipDuplicates"],
    DeleteAccountArgs: ["where"],
    UpdateAccountArgs: ["data", "where"],
    DeleteManyAccountArgs: ["where"],
    UpdateManyAccountArgs: ["data", "where"],
    UpsertAccountArgs: ["where", "create", "update"],
    AggregateAccountArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByAccountArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueVerificationTokenArgs: ["where"],
    FindFirstVerificationTokenArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyVerificationTokenArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateVerificationTokenArgs: ["data"],
    CreateManyVerificationTokenArgs: ["data", "skipDuplicates"],
    DeleteVerificationTokenArgs: ["where"],
    UpdateVerificationTokenArgs: ["data", "where"],
    DeleteManyVerificationTokenArgs: ["where"],
    UpdateManyVerificationTokenArgs: ["data", "where"],
    UpsertVerificationTokenArgs: ["where", "create", "update"],
    AggregateVerificationTokenArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByVerificationTokenArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueSessionArgs: ["where"],
    FindFirstSessionArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManySessionArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateSessionArgs: ["data"],
    CreateManySessionArgs: ["data", "skipDuplicates"],
    DeleteSessionArgs: ["where"],
    UpdateSessionArgs: ["data", "where"],
    DeleteManySessionArgs: ["where"],
    UpdateManySessionArgs: ["data", "where"],
    UpsertSessionArgs: ["where", "create", "update"],
    AggregateSessionArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupBySessionArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueUserArgs: ["where"],
    FindFirstUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateUserArgs: ["data"],
    CreateManyUserArgs: ["data", "skipDuplicates"],
    DeleteUserArgs: ["where"],
    UpdateUserArgs: ["data", "where"],
    DeleteManyUserArgs: ["where"],
    UpdateManyUserArgs: ["data", "where"],
    UpsertUserArgs: ["where", "create", "update"],
    AggregateUserArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByUserArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueCoachArgs: ["where"],
    FindFirstCoachArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyCoachArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateCoachArgs: ["data"],
    CreateManyCoachArgs: ["data", "skipDuplicates"],
    DeleteCoachArgs: ["where"],
    UpdateCoachArgs: ["data", "where"],
    DeleteManyCoachArgs: ["where"],
    UpdateManyCoachArgs: ["data", "where"],
    UpsertCoachArgs: ["where", "create", "update"],
    AggregateCoachArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByCoachArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueAthleteArgs: ["where"],
    FindFirstAthleteArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyAthleteArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateAthleteArgs: ["data"],
    CreateManyAthleteArgs: ["data", "skipDuplicates"],
    DeleteAthleteArgs: ["where"],
    UpdateAthleteArgs: ["data", "where"],
    DeleteManyAthleteArgs: ["where"],
    UpdateManyAthleteArgs: ["data", "where"],
    UpsertAthleteArgs: ["where", "create", "update"],
    AggregateAthleteArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByAthleteArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueAdminArgs: ["where"],
    FindFirstAdminArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyAdminArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateAdminArgs: ["data"],
    CreateManyAdminArgs: ["data", "skipDuplicates"],
    DeleteAdminArgs: ["where"],
    UpdateAdminArgs: ["data", "where"],
    DeleteManyAdminArgs: ["where"],
    UpdateManyAdminArgs: ["data", "where"],
    UpsertAdminArgs: ["where", "create", "update"],
    AggregateAdminArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByAdminArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueWeightArgs: ["where"],
    FindFirstWeightArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyWeightArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateWeightArgs: ["data"],
    CreateManyWeightArgs: ["data", "skipDuplicates"],
    DeleteWeightArgs: ["where"],
    UpdateWeightArgs: ["data", "where"],
    DeleteManyWeightArgs: ["where"],
    UpdateManyWeightArgs: ["data", "where"],
    UpsertWeightArgs: ["where", "create", "update"],
    AggregateWeightArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByWeightArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueDoneWorkoutArgs: ["where"],
    FindFirstDoneWorkoutArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyDoneWorkoutArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateDoneWorkoutArgs: ["data"],
    CreateManyDoneWorkoutArgs: ["data", "skipDuplicates"],
    DeleteDoneWorkoutArgs: ["where"],
    UpdateDoneWorkoutArgs: ["data", "where"],
    DeleteManyDoneWorkoutArgs: ["where"],
    UpdateManyDoneWorkoutArgs: ["data", "where"],
    UpsertDoneWorkoutArgs: ["where", "create", "update"],
    AggregateDoneWorkoutArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByDoneWorkoutArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueWorkoutToDoArgs: ["where"],
    FindFirstWorkoutToDoArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyWorkoutToDoArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateWorkoutToDoArgs: ["data"],
    CreateManyWorkoutToDoArgs: ["data", "skipDuplicates"],
    DeleteWorkoutToDoArgs: ["where"],
    UpdateWorkoutToDoArgs: ["data", "where"],
    DeleteManyWorkoutToDoArgs: ["where"],
    UpdateManyWorkoutToDoArgs: ["data", "where"],
    UpsertWorkoutToDoArgs: ["where", "create", "update"],
    AggregateWorkoutToDoArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByWorkoutToDoArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueGlobalWorkoutArgs: ["where"],
    FindFirstGlobalWorkoutArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyGlobalWorkoutArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateGlobalWorkoutArgs: ["data"],
    CreateManyGlobalWorkoutArgs: ["data", "skipDuplicates"],
    DeleteGlobalWorkoutArgs: ["where"],
    UpdateGlobalWorkoutArgs: ["data", "where"],
    DeleteManyGlobalWorkoutArgs: ["where"],
    UpdateManyGlobalWorkoutArgs: ["data", "where"],
    UpsertGlobalWorkoutArgs: ["where", "create", "update"],
    AggregateGlobalWorkoutArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByGlobalWorkoutArgs: ["where", "orderBy", "by", "having", "take", "skip"]
};
function applyResolversEnhanceMap(resolversEnhanceMap) {
    for (const resolversEnhanceMapKey of Object.keys(resolversEnhanceMap)) {
        const modelName = resolversEnhanceMapKey;
        const crudTarget = crudResolversMap[modelName].prototype;
        const resolverActionsConfig = resolversEnhanceMap[modelName];
        const actionResolversConfig = actionResolversMap[modelName];
        if (resolverActionsConfig._all) {
            const allActionsDecorators = resolverActionsConfig._all;
            const resolverActionNames = crudResolversInfo[modelName];
            for (const resolverActionName of resolverActionNames) {
                const actionTarget = actionResolversConfig[resolverActionName].prototype;
                tslib.__decorate(allActionsDecorators, crudTarget, resolverActionName, null);
                tslib.__decorate(allActionsDecorators, actionTarget, resolverActionName, null);
            }
        }
        const resolverActionsToApply = Object.keys(resolverActionsConfig).filter(it => it !== "_all");
        for (const resolverActionName of resolverActionsToApply) {
            const decorators = resolverActionsConfig[resolverActionName];
            const actionTarget = actionResolversConfig[resolverActionName].prototype;
            tslib.__decorate(decorators, crudTarget, resolverActionName, null);
            tslib.__decorate(decorators, actionTarget, resolverActionName, null);
        }
    }
}
exports.applyResolversEnhanceMap = applyResolversEnhanceMap;
function applyArgsTypesEnhanceMap(argsTypesEnhanceMap) {
    for (const argsTypesEnhanceMapKey of Object.keys(argsTypesEnhanceMap)) {
        const argsTypeName = argsTypesEnhanceMapKey;
        const typeConfig = argsTypesEnhanceMap[argsTypeName];
        const typeClass = argsTypes[argsTypeName];
        const typeTarget = typeClass.prototype;
        applyTypeClassEnhanceConfig(typeConfig, typeClass, typeTarget, argsInfo[argsTypeName]);
    }
}
exports.applyArgsTypesEnhanceMap = applyArgsTypesEnhanceMap;
const relationResolversMap = {
    Account: relationResolvers.AccountRelationsResolver,
    Session: relationResolvers.SessionRelationsResolver,
    User: relationResolvers.UserRelationsResolver,
    Coach: relationResolvers.CoachRelationsResolver,
    Athlete: relationResolvers.AthleteRelationsResolver,
    Admin: relationResolvers.AdminRelationsResolver,
    Weight: relationResolvers.WeightRelationsResolver,
    DoneWorkout: relationResolvers.DoneWorkoutRelationsResolver,
    WorkoutToDo: relationResolvers.WorkoutToDoRelationsResolver,
    GlobalWorkout: relationResolvers.GlobalWorkoutRelationsResolver
};
const relationResolversInfo = {
    Account: ["user"],
    Session: ["user"],
    User: ["accounts", "sessions", "Coach", "Athlete", "Admin"],
    Coach: ["user", "WorkoutToDo", "GlobalWorkout"],
    Athlete: ["user", "Weights", "DoneWorkouts", "WorkoutstToDo"],
    Admin: ["user"],
    Weight: ["athlete"],
    DoneWorkout: ["athlete"],
    WorkoutToDo: ["coach", "athlete"],
    GlobalWorkout: ["coach"]
};
function applyRelationResolversEnhanceMap(relationResolversEnhanceMap) {
    for (const relationResolversEnhanceMapKey of Object.keys(relationResolversEnhanceMap)) {
        const modelName = relationResolversEnhanceMapKey;
        const relationResolverTarget = relationResolversMap[modelName].prototype;
        const relationResolverActionsConfig = relationResolversEnhanceMap[modelName];
        if (relationResolverActionsConfig._all) {
            const allActionsDecorators = relationResolverActionsConfig._all;
            const relationResolverActionNames = relationResolversInfo[modelName];
            for (const relationResolverActionName of relationResolverActionNames) {
                tslib.__decorate(allActionsDecorators, relationResolverTarget, relationResolverActionName, null);
            }
        }
        const relationResolverActionsToApply = Object.keys(relationResolverActionsConfig).filter(it => it !== "_all");
        for (const relationResolverActionName of relationResolverActionsToApply) {
            const decorators = relationResolverActionsConfig[relationResolverActionName];
            tslib.__decorate(decorators, relationResolverTarget, relationResolverActionName, null);
        }
    }
}
exports.applyRelationResolversEnhanceMap = applyRelationResolversEnhanceMap;
function applyTypeClassEnhanceConfig(enhanceConfig, typeClass, typePrototype, typeFieldNames) {
    if (enhanceConfig.class) {
        tslib.__decorate(enhanceConfig.class, typeClass);
    }
    if (enhanceConfig.fields) {
        if (enhanceConfig.fields._all) {
            const allFieldsDecorators = enhanceConfig.fields._all;
            for (const typeFieldName of typeFieldNames) {
                tslib.__decorate(allFieldsDecorators, typePrototype, typeFieldName, void 0);
            }
        }
        const configFieldsToApply = Object.keys(enhanceConfig.fields).filter(it => it !== "_all");
        for (const typeFieldName of configFieldsToApply) {
            const fieldDecorators = enhanceConfig.fields[typeFieldName];
            tslib.__decorate(fieldDecorators, typePrototype, typeFieldName, void 0);
        }
    }
}
const modelsInfo = {
    Account: ["id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state"],
    VerificationToken: ["identifier", "token", "expires"],
    Session: ["id", "sessionToken", "userId", "expires"],
    User: ["id", "name", "email", "emailVerified", "image"],
    Coach: ["id", "name", "lastname", "schoolId", "description", "scheduler", "KnowTrainer", "gender", "status", "userId"],
    Athlete: ["id", "name", "lastname", "schoolId", "gender", "height", "userId"],
    Admin: ["id", "name", "lastname", "schoolId", "gender", "userId"],
    Weight: ["id", "weight", "date", "athleteId"],
    DoneWorkout: ["id", "date", "calories", "time", "distance", "intensity", "athleteId"],
    WorkoutToDo: ["id", "date", "indications", "goal", "goalvalue", "coachId", "athleteId"],
    GlobalWorkout: ["id", "indications", "goal", "goalvalue", "coachId"]
};
function applyModelsEnhanceMap(modelsEnhanceMap) {
    for (const modelsEnhanceMapKey of Object.keys(modelsEnhanceMap)) {
        const modelName = modelsEnhanceMapKey;
        const modelConfig = modelsEnhanceMap[modelName];
        const modelClass = models[modelName];
        const modelTarget = modelClass.prototype;
        applyTypeClassEnhanceConfig(modelConfig, modelClass, modelTarget, modelsInfo[modelName]);
    }
}
exports.applyModelsEnhanceMap = applyModelsEnhanceMap;
const outputsInfo = {
    AggregateAccount: ["_count", "_avg", "_sum", "_min", "_max"],
    AccountGroupBy: ["id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateVerificationToken: ["_count", "_min", "_max"],
    VerificationTokenGroupBy: ["identifier", "token", "expires", "_count", "_min", "_max"],
    AggregateSession: ["_count", "_min", "_max"],
    SessionGroupBy: ["id", "sessionToken", "userId", "expires", "_count", "_min", "_max"],
    AggregateUser: ["_count", "_min", "_max"],
    UserGroupBy: ["id", "name", "email", "emailVerified", "image", "_count", "_min", "_max"],
    AggregateCoach: ["_count", "_min", "_max"],
    CoachGroupBy: ["id", "name", "lastname", "schoolId", "description", "scheduler", "KnowTrainer", "gender", "status", "userId", "_count", "_min", "_max"],
    AggregateAthlete: ["_count", "_avg", "_sum", "_min", "_max"],
    AthleteGroupBy: ["id", "name", "lastname", "schoolId", "gender", "height", "userId", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateAdmin: ["_count", "_min", "_max"],
    AdminGroupBy: ["id", "name", "lastname", "schoolId", "gender", "userId", "_count", "_min", "_max"],
    AggregateWeight: ["_count", "_avg", "_sum", "_min", "_max"],
    WeightGroupBy: ["id", "weight", "date", "athleteId", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateDoneWorkout: ["_count", "_avg", "_sum", "_min", "_max"],
    DoneWorkoutGroupBy: ["id", "date", "calories", "time", "distance", "intensity", "athleteId", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateWorkoutToDo: ["_count", "_avg", "_sum", "_min", "_max"],
    WorkoutToDoGroupBy: ["id", "date", "indications", "goal", "goalvalue", "coachId", "athleteId", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateGlobalWorkout: ["_count", "_min", "_max"],
    GlobalWorkoutGroupBy: ["id", "indications", "goal", "goalvalue", "coachId", "_count", "_min", "_max"],
    AffectedRowsOutput: ["count"],
    AccountCountAggregate: ["id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "_all"],
    AccountAvgAggregate: ["expires_at"],
    AccountSumAggregate: ["expires_at"],
    AccountMinAggregate: ["id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state"],
    AccountMaxAggregate: ["id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state"],
    VerificationTokenCountAggregate: ["identifier", "token", "expires", "_all"],
    VerificationTokenMinAggregate: ["identifier", "token", "expires"],
    VerificationTokenMaxAggregate: ["identifier", "token", "expires"],
    SessionCountAggregate: ["id", "sessionToken", "userId", "expires", "_all"],
    SessionMinAggregate: ["id", "sessionToken", "userId", "expires"],
    SessionMaxAggregate: ["id", "sessionToken", "userId", "expires"],
    UserCount: ["accounts", "sessions"],
    UserCountAggregate: ["id", "name", "email", "emailVerified", "image", "_all"],
    UserMinAggregate: ["id", "name", "email", "emailVerified", "image"],
    UserMaxAggregate: ["id", "name", "email", "emailVerified", "image"],
    CoachCount: ["WorkoutToDo", "GlobalWorkout"],
    CoachCountAggregate: ["id", "name", "lastname", "schoolId", "description", "scheduler", "KnowTrainer", "gender", "status", "userId", "_all"],
    CoachMinAggregate: ["id", "name", "lastname", "schoolId", "description", "scheduler", "KnowTrainer", "gender", "status", "userId"],
    CoachMaxAggregate: ["id", "name", "lastname", "schoolId", "description", "scheduler", "KnowTrainer", "gender", "status", "userId"],
    AthleteCount: ["Weights", "DoneWorkouts", "WorkoutstToDo"],
    AthleteCountAggregate: ["id", "name", "lastname", "schoolId", "gender", "height", "userId", "_all"],
    AthleteAvgAggregate: ["height"],
    AthleteSumAggregate: ["height"],
    AthleteMinAggregate: ["id", "name", "lastname", "schoolId", "gender", "height", "userId"],
    AthleteMaxAggregate: ["id", "name", "lastname", "schoolId", "gender", "height", "userId"],
    AdminCountAggregate: ["id", "name", "lastname", "schoolId", "gender", "userId", "_all"],
    AdminMinAggregate: ["id", "name", "lastname", "schoolId", "gender", "userId"],
    AdminMaxAggregate: ["id", "name", "lastname", "schoolId", "gender", "userId"],
    WeightCountAggregate: ["id", "weight", "date", "athleteId", "_all"],
    WeightAvgAggregate: ["weight"],
    WeightSumAggregate: ["weight"],
    WeightMinAggregate: ["id", "weight", "date", "athleteId"],
    WeightMaxAggregate: ["id", "weight", "date", "athleteId"],
    DoneWorkoutCountAggregate: ["id", "date", "calories", "time", "distance", "intensity", "athleteId", "_all"],
    DoneWorkoutAvgAggregate: ["calories", "time", "distance", "intensity"],
    DoneWorkoutSumAggregate: ["calories", "time", "distance", "intensity"],
    DoneWorkoutMinAggregate: ["id", "date", "calories", "time", "distance", "intensity", "athleteId"],
    DoneWorkoutMaxAggregate: ["id", "date", "calories", "time", "distance", "intensity", "athleteId"],
    WorkoutToDoCountAggregate: ["id", "date", "indications", "goal", "goalvalue", "coachId", "athleteId", "_all"],
    WorkoutToDoAvgAggregate: ["goalvalue"],
    WorkoutToDoSumAggregate: ["goalvalue"],
    WorkoutToDoMinAggregate: ["id", "date", "indications", "goal", "goalvalue", "coachId", "athleteId"],
    WorkoutToDoMaxAggregate: ["id", "date", "indications", "goal", "goalvalue", "coachId", "athleteId"],
    GlobalWorkoutCountAggregate: ["id", "indications", "goal", "goalvalue", "coachId", "_all"],
    GlobalWorkoutMinAggregate: ["id", "indications", "goal", "goalvalue", "coachId"],
    GlobalWorkoutMaxAggregate: ["id", "indications", "goal", "goalvalue", "coachId"]
};
function applyOutputTypesEnhanceMap(outputTypesEnhanceMap) {
    for (const outputTypeEnhanceMapKey of Object.keys(outputTypesEnhanceMap)) {
        const outputTypeName = outputTypeEnhanceMapKey;
        const typeConfig = outputTypesEnhanceMap[outputTypeName];
        const typeClass = outputTypes[outputTypeName];
        const typeTarget = typeClass.prototype;
        applyTypeClassEnhanceConfig(typeConfig, typeClass, typeTarget, outputsInfo[outputTypeName]);
    }
}
exports.applyOutputTypesEnhanceMap = applyOutputTypesEnhanceMap;
const inputsInfo = {
    AccountWhereInput: ["AND", "OR", "NOT", "id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "user"],
    AccountOrderByWithRelationInput: ["id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "user"],
    AccountWhereUniqueInput: ["id", "provider_providerAccountId"],
    AccountOrderByWithAggregationInput: ["id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "_count", "_avg", "_max", "_min", "_sum"],
    AccountScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state"],
    VerificationTokenWhereInput: ["AND", "OR", "NOT", "identifier", "token", "expires"],
    VerificationTokenOrderByWithRelationInput: ["identifier", "token", "expires"],
    VerificationTokenWhereUniqueInput: ["token", "identifier_token"],
    VerificationTokenOrderByWithAggregationInput: ["identifier", "token", "expires", "_count", "_max", "_min"],
    VerificationTokenScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "identifier", "token", "expires"],
    SessionWhereInput: ["AND", "OR", "NOT", "id", "sessionToken", "userId", "expires", "user"],
    SessionOrderByWithRelationInput: ["id", "sessionToken", "userId", "expires", "user"],
    SessionWhereUniqueInput: ["id", "sessionToken"],
    SessionOrderByWithAggregationInput: ["id", "sessionToken", "userId", "expires", "_count", "_max", "_min"],
    SessionScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "sessionToken", "userId", "expires"],
    UserWhereInput: ["AND", "OR", "NOT", "id", "name", "email", "emailVerified", "image", "accounts", "sessions", "Coach", "Athlete", "Admin"],
    UserOrderByWithRelationInput: ["id", "name", "email", "emailVerified", "image", "accounts", "sessions", "Coach", "Athlete", "Admin"],
    UserWhereUniqueInput: ["id", "email"],
    UserOrderByWithAggregationInput: ["id", "name", "email", "emailVerified", "image", "_count", "_max", "_min"],
    UserScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "name", "email", "emailVerified", "image"],
    CoachWhereInput: ["AND", "OR", "NOT", "id", "name", "lastname", "schoolId", "description", "scheduler", "KnowTrainer", "gender", "status", "user", "userId", "WorkoutToDo", "GlobalWorkout"],
    CoachOrderByWithRelationInput: ["id", "name", "lastname", "schoolId", "description", "scheduler", "KnowTrainer", "gender", "status", "user", "userId", "WorkoutToDo", "GlobalWorkout"],
    CoachWhereUniqueInput: ["id", "schoolId", "userId"],
    CoachOrderByWithAggregationInput: ["id", "name", "lastname", "schoolId", "description", "scheduler", "KnowTrainer", "gender", "status", "userId", "_count", "_max", "_min"],
    CoachScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "name", "lastname", "schoolId", "description", "scheduler", "KnowTrainer", "gender", "status", "userId"],
    AthleteWhereInput: ["AND", "OR", "NOT", "id", "name", "lastname", "schoolId", "gender", "height", "user", "Weights", "DoneWorkouts", "WorkoutstToDo", "userId"],
    AthleteOrderByWithRelationInput: ["id", "name", "lastname", "schoolId", "gender", "height", "user", "Weights", "DoneWorkouts", "WorkoutstToDo", "userId"],
    AthleteWhereUniqueInput: ["id", "schoolId", "userId"],
    AthleteOrderByWithAggregationInput: ["id", "name", "lastname", "schoolId", "gender", "height", "userId", "_count", "_avg", "_max", "_min", "_sum"],
    AthleteScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "name", "lastname", "schoolId", "gender", "height", "userId"],
    AdminWhereInput: ["AND", "OR", "NOT", "id", "name", "lastname", "schoolId", "user", "gender", "userId"],
    AdminOrderByWithRelationInput: ["id", "name", "lastname", "schoolId", "user", "gender", "userId"],
    AdminWhereUniqueInput: ["id", "schoolId", "userId"],
    AdminOrderByWithAggregationInput: ["id", "name", "lastname", "schoolId", "gender", "userId", "_count", "_max", "_min"],
    AdminScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "name", "lastname", "schoolId", "gender", "userId"],
    WeightWhereInput: ["AND", "OR", "NOT", "id", "weight", "athlete", "date", "athleteId"],
    WeightOrderByWithRelationInput: ["id", "weight", "athlete", "date", "athleteId"],
    WeightWhereUniqueInput: ["id"],
    WeightOrderByWithAggregationInput: ["id", "weight", "date", "athleteId", "_count", "_avg", "_max", "_min", "_sum"],
    WeightScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "weight", "date", "athleteId"],
    DoneWorkoutWhereInput: ["AND", "OR", "NOT", "id", "athlete", "date", "calories", "time", "distance", "intensity", "athleteId"],
    DoneWorkoutOrderByWithRelationInput: ["id", "athlete", "date", "calories", "time", "distance", "intensity", "athleteId"],
    DoneWorkoutWhereUniqueInput: ["id"],
    DoneWorkoutOrderByWithAggregationInput: ["id", "date", "calories", "time", "distance", "intensity", "athleteId", "_count", "_avg", "_max", "_min", "_sum"],
    DoneWorkoutScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "date", "calories", "time", "distance", "intensity", "athleteId"],
    WorkoutToDoWhereInput: ["AND", "OR", "NOT", "id", "coach", "athlete", "date", "indications", "goal", "goalvalue", "coachId", "athleteId"],
    WorkoutToDoOrderByWithRelationInput: ["id", "coach", "athlete", "date", "indications", "goal", "goalvalue", "coachId", "athleteId"],
    WorkoutToDoWhereUniqueInput: ["id"],
    WorkoutToDoOrderByWithAggregationInput: ["id", "date", "indications", "goal", "goalvalue", "coachId", "athleteId", "_count", "_avg", "_max", "_min", "_sum"],
    WorkoutToDoScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "date", "indications", "goal", "goalvalue", "coachId", "athleteId"],
    GlobalWorkoutWhereInput: ["AND", "OR", "NOT", "id", "coach", "indications", "goal", "goalvalue", "coachId"],
    GlobalWorkoutOrderByWithRelationInput: ["id", "coach", "indications", "goal", "goalvalue", "coachId"],
    GlobalWorkoutWhereUniqueInput: ["id"],
    GlobalWorkoutOrderByWithAggregationInput: ["id", "indications", "goal", "goalvalue", "coachId", "_count", "_max", "_min"],
    GlobalWorkoutScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "indications", "goal", "goalvalue", "coachId"],
    AccountCreateInput: ["id", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "user"],
    AccountUpdateInput: ["id", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "user"],
    AccountCreateManyInput: ["id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state"],
    AccountUpdateManyMutationInput: ["id", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state"],
    VerificationTokenCreateInput: ["identifier", "token", "expires"],
    VerificationTokenUpdateInput: ["identifier", "token", "expires"],
    VerificationTokenCreateManyInput: ["identifier", "token", "expires"],
    VerificationTokenUpdateManyMutationInput: ["identifier", "token", "expires"],
    SessionCreateInput: ["id", "sessionToken", "expires", "user"],
    SessionUpdateInput: ["id", "sessionToken", "expires", "user"],
    SessionCreateManyInput: ["id", "sessionToken", "userId", "expires"],
    SessionUpdateManyMutationInput: ["id", "sessionToken", "expires"],
    UserCreateInput: ["id", "name", "email", "emailVerified", "image", "accounts", "sessions", "Coach", "Athlete", "Admin"],
    UserUpdateInput: ["id", "name", "email", "emailVerified", "image", "accounts", "sessions", "Coach", "Athlete", "Admin"],
    UserCreateManyInput: ["id", "name", "email", "emailVerified", "image"],
    UserUpdateManyMutationInput: ["id", "name", "email", "emailVerified", "image"],
    CoachCreateInput: ["id", "name", "lastname", "schoolId", "description", "scheduler", "KnowTrainer", "gender", "status", "user", "WorkoutToDo", "GlobalWorkout"],
    CoachUpdateInput: ["id", "name", "lastname", "schoolId", "description", "scheduler", "KnowTrainer", "gender", "status", "user", "WorkoutToDo", "GlobalWorkout"],
    CoachCreateManyInput: ["id", "name", "lastname", "schoolId", "description", "scheduler", "KnowTrainer", "gender", "status", "userId"],
    CoachUpdateManyMutationInput: ["id", "name", "lastname", "schoolId", "description", "scheduler", "KnowTrainer", "gender", "status"],
    AthleteCreateInput: ["id", "name", "lastname", "schoolId", "gender", "height", "user", "Weights", "DoneWorkouts", "WorkoutstToDo"],
    AthleteUpdateInput: ["id", "name", "lastname", "schoolId", "gender", "height", "user", "Weights", "DoneWorkouts", "WorkoutstToDo"],
    AthleteCreateManyInput: ["id", "name", "lastname", "schoolId", "gender", "height", "userId"],
    AthleteUpdateManyMutationInput: ["id", "name", "lastname", "schoolId", "gender", "height"],
    AdminCreateInput: ["id", "name", "lastname", "schoolId", "user", "gender"],
    AdminUpdateInput: ["id", "name", "lastname", "schoolId", "user", "gender"],
    AdminCreateManyInput: ["id", "name", "lastname", "schoolId", "gender", "userId"],
    AdminUpdateManyMutationInput: ["id", "name", "lastname", "schoolId", "gender"],
    WeightCreateInput: ["id", "weight", "athlete", "date"],
    WeightUpdateInput: ["id", "weight", "athlete", "date"],
    WeightCreateManyInput: ["id", "weight", "date", "athleteId"],
    WeightUpdateManyMutationInput: ["id", "weight", "date"],
    DoneWorkoutCreateInput: ["id", "athlete", "date", "calories", "time", "distance", "intensity"],
    DoneWorkoutUpdateInput: ["id", "athlete", "date", "calories", "time", "distance", "intensity"],
    DoneWorkoutCreateManyInput: ["id", "date", "calories", "time", "distance", "intensity", "athleteId"],
    DoneWorkoutUpdateManyMutationInput: ["id", "date", "calories", "time", "distance", "intensity"],
    WorkoutToDoCreateInput: ["id", "coach", "athlete", "date", "indications", "goal", "goalvalue"],
    WorkoutToDoUpdateInput: ["id", "coach", "athlete", "date", "indications", "goal", "goalvalue"],
    WorkoutToDoCreateManyInput: ["id", "date", "indications", "goal", "goalvalue", "coachId", "athleteId"],
    WorkoutToDoUpdateManyMutationInput: ["id", "date", "indications", "goal", "goalvalue"],
    GlobalWorkoutCreateInput: ["id", "coach", "indications", "goal", "goalvalue"],
    GlobalWorkoutUpdateInput: ["id", "coach", "indications", "goal", "goalvalue"],
    GlobalWorkoutCreateManyInput: ["id", "indications", "goal", "goalvalue", "coachId"],
    GlobalWorkoutUpdateManyMutationInput: ["id", "indications", "goal", "goalvalue"],
    StringFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not"],
    StringNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not"],
    IntNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    UserRelationFilter: ["is", "isNot"],
    AccountProviderProviderAccountIdCompoundUniqueInput: ["provider", "providerAccountId"],
    AccountCountOrderByAggregateInput: ["id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state"],
    AccountAvgOrderByAggregateInput: ["expires_at"],
    AccountMaxOrderByAggregateInput: ["id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state"],
    AccountMinOrderByAggregateInput: ["id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state"],
    AccountSumOrderByAggregateInput: ["expires_at"],
    StringWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not", "_count", "_min", "_max"],
    StringNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not", "_count", "_min", "_max"],
    IntNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    DateTimeFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    VerificationTokenIdentifierTokenCompoundUniqueInput: ["identifier", "token"],
    VerificationTokenCountOrderByAggregateInput: ["identifier", "token", "expires"],
    VerificationTokenMaxOrderByAggregateInput: ["identifier", "token", "expires"],
    VerificationTokenMinOrderByAggregateInput: ["identifier", "token", "expires"],
    DateTimeWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
    SessionCountOrderByAggregateInput: ["id", "sessionToken", "userId", "expires"],
    SessionMaxOrderByAggregateInput: ["id", "sessionToken", "userId", "expires"],
    SessionMinOrderByAggregateInput: ["id", "sessionToken", "userId", "expires"],
    DateTimeNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    AccountListRelationFilter: ["every", "some", "none"],
    SessionListRelationFilter: ["every", "some", "none"],
    CoachRelationFilter: ["is", "isNot"],
    AthleteRelationFilter: ["is", "isNot"],
    AdminRelationFilter: ["is", "isNot"],
    AccountOrderByRelationAggregateInput: ["_count"],
    SessionOrderByRelationAggregateInput: ["_count"],
    UserCountOrderByAggregateInput: ["id", "name", "email", "emailVerified", "image"],
    UserMaxOrderByAggregateInput: ["id", "name", "email", "emailVerified", "image"],
    UserMinOrderByAggregateInput: ["id", "name", "email", "emailVerified", "image"],
    DateTimeNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
    EnumEnum_GenderFilter: ["equals", "in", "notIn", "not"],
    EnumEnum_StatusFilter: ["equals", "in", "notIn", "not"],
    WorkoutToDoListRelationFilter: ["every", "some", "none"],
    GlobalWorkoutListRelationFilter: ["every", "some", "none"],
    WorkoutToDoOrderByRelationAggregateInput: ["_count"],
    GlobalWorkoutOrderByRelationAggregateInput: ["_count"],
    CoachCountOrderByAggregateInput: ["id", "name", "lastname", "schoolId", "description", "scheduler", "KnowTrainer", "gender", "status", "userId"],
    CoachMaxOrderByAggregateInput: ["id", "name", "lastname", "schoolId", "description", "scheduler", "KnowTrainer", "gender", "status", "userId"],
    CoachMinOrderByAggregateInput: ["id", "name", "lastname", "schoolId", "description", "scheduler", "KnowTrainer", "gender", "status", "userId"],
    EnumEnum_GenderWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    EnumEnum_StatusWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    IntFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    WeightListRelationFilter: ["every", "some", "none"],
    DoneWorkoutListRelationFilter: ["every", "some", "none"],
    WeightOrderByRelationAggregateInput: ["_count"],
    DoneWorkoutOrderByRelationAggregateInput: ["_count"],
    AthleteCountOrderByAggregateInput: ["id", "name", "lastname", "schoolId", "gender", "height", "userId"],
    AthleteAvgOrderByAggregateInput: ["height"],
    AthleteMaxOrderByAggregateInput: ["id", "name", "lastname", "schoolId", "gender", "height", "userId"],
    AthleteMinOrderByAggregateInput: ["id", "name", "lastname", "schoolId", "gender", "height", "userId"],
    AthleteSumOrderByAggregateInput: ["height"],
    IntWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    AdminCountOrderByAggregateInput: ["id", "name", "lastname", "schoolId", "gender", "userId"],
    AdminMaxOrderByAggregateInput: ["id", "name", "lastname", "schoolId", "gender", "userId"],
    AdminMinOrderByAggregateInput: ["id", "name", "lastname", "schoolId", "gender", "userId"],
    FloatFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    WeightCountOrderByAggregateInput: ["id", "weight", "date", "athleteId"],
    WeightAvgOrderByAggregateInput: ["weight"],
    WeightMaxOrderByAggregateInput: ["id", "weight", "date", "athleteId"],
    WeightMinOrderByAggregateInput: ["id", "weight", "date", "athleteId"],
    WeightSumOrderByAggregateInput: ["weight"],
    FloatWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    DoneWorkoutCountOrderByAggregateInput: ["id", "date", "calories", "time", "distance", "intensity", "athleteId"],
    DoneWorkoutAvgOrderByAggregateInput: ["calories", "time", "distance", "intensity"],
    DoneWorkoutMaxOrderByAggregateInput: ["id", "date", "calories", "time", "distance", "intensity", "athleteId"],
    DoneWorkoutMinOrderByAggregateInput: ["id", "date", "calories", "time", "distance", "intensity", "athleteId"],
    DoneWorkoutSumOrderByAggregateInput: ["calories", "time", "distance", "intensity"],
    EnumEnum_GoalFilter: ["equals", "in", "notIn", "not"],
    WorkoutToDoCountOrderByAggregateInput: ["id", "date", "indications", "goal", "goalvalue", "coachId", "athleteId"],
    WorkoutToDoAvgOrderByAggregateInput: ["goalvalue"],
    WorkoutToDoMaxOrderByAggregateInput: ["id", "date", "indications", "goal", "goalvalue", "coachId", "athleteId"],
    WorkoutToDoMinOrderByAggregateInput: ["id", "date", "indications", "goal", "goalvalue", "coachId", "athleteId"],
    WorkoutToDoSumOrderByAggregateInput: ["goalvalue"],
    EnumEnum_GoalWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    GlobalWorkoutCountOrderByAggregateInput: ["id", "indications", "goal", "goalvalue", "coachId"],
    GlobalWorkoutMaxOrderByAggregateInput: ["id", "indications", "goal", "goalvalue", "coachId"],
    GlobalWorkoutMinOrderByAggregateInput: ["id", "indications", "goal", "goalvalue", "coachId"],
    UserCreateNestedOneWithoutAccountsInput: ["create", "connectOrCreate", "connect"],
    StringFieldUpdateOperationsInput: ["set"],
    NullableStringFieldUpdateOperationsInput: ["set"],
    NullableIntFieldUpdateOperationsInput: ["set", "increment", "decrement", "multiply", "divide"],
    UserUpdateOneRequiredWithoutAccountsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    DateTimeFieldUpdateOperationsInput: ["set"],
    UserCreateNestedOneWithoutSessionsInput: ["create", "connectOrCreate", "connect"],
    UserUpdateOneRequiredWithoutSessionsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    AccountCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
    SessionCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
    CoachCreateNestedOneWithoutUserInput: ["create", "connectOrCreate", "connect"],
    AthleteCreateNestedOneWithoutUserInput: ["create", "connectOrCreate", "connect"],
    AdminCreateNestedOneWithoutUserInput: ["create", "connectOrCreate", "connect"],
    NullableDateTimeFieldUpdateOperationsInput: ["set"],
    AccountUpdateManyWithoutUserInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    SessionUpdateManyWithoutUserInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    CoachUpdateOneWithoutUserInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    AthleteUpdateOneWithoutUserInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    AdminUpdateOneWithoutUserInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    UserCreateNestedOneWithoutCoachInput: ["create", "connectOrCreate", "connect"],
    WorkoutToDoCreateNestedManyWithoutCoachInput: ["create", "connectOrCreate", "createMany", "connect"],
    GlobalWorkoutCreateNestedManyWithoutCoachInput: ["create", "connectOrCreate", "createMany", "connect"],
    EnumEnum_GenderFieldUpdateOperationsInput: ["set"],
    EnumEnum_StatusFieldUpdateOperationsInput: ["set"],
    UserUpdateOneRequiredWithoutCoachInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    WorkoutToDoUpdateManyWithoutCoachInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    GlobalWorkoutUpdateManyWithoutCoachInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    UserCreateNestedOneWithoutAthleteInput: ["create", "connectOrCreate", "connect"],
    WeightCreateNestedManyWithoutAthleteInput: ["create", "connectOrCreate", "createMany", "connect"],
    DoneWorkoutCreateNestedManyWithoutAthleteInput: ["create", "connectOrCreate", "createMany", "connect"],
    WorkoutToDoCreateNestedManyWithoutAthleteInput: ["create", "connectOrCreate", "createMany", "connect"],
    IntFieldUpdateOperationsInput: ["set", "increment", "decrement", "multiply", "divide"],
    UserUpdateOneRequiredWithoutAthleteInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    WeightUpdateManyWithoutAthleteInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    DoneWorkoutUpdateManyWithoutAthleteInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    WorkoutToDoUpdateManyWithoutAthleteInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    UserCreateNestedOneWithoutAdminInput: ["create", "connectOrCreate", "connect"],
    UserUpdateOneRequiredWithoutAdminInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    AthleteCreateNestedOneWithoutWeightsInput: ["create", "connectOrCreate", "connect"],
    FloatFieldUpdateOperationsInput: ["set", "increment", "decrement", "multiply", "divide"],
    AthleteUpdateOneRequiredWithoutWeightsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    AthleteCreateNestedOneWithoutDoneWorkoutsInput: ["create", "connectOrCreate", "connect"],
    AthleteUpdateOneRequiredWithoutDoneWorkoutsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    CoachCreateNestedOneWithoutWorkoutToDoInput: ["create", "connectOrCreate", "connect"],
    AthleteCreateNestedOneWithoutWorkoutstToDoInput: ["create", "connectOrCreate", "connect"],
    CoachUpdateOneRequiredWithoutWorkoutToDoInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    AthleteUpdateOneRequiredWithoutWorkoutstToDoInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    EnumEnum_GoalFieldUpdateOperationsInput: ["set"],
    CoachCreateNestedOneWithoutGlobalWorkoutInput: ["create", "connectOrCreate", "connect"],
    CoachUpdateOneRequiredWithoutGlobalWorkoutInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    NestedStringFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not"],
    NestedStringNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not"],
    NestedIntNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedStringWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not", "_count", "_min", "_max"],
    NestedIntFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedStringNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not", "_count", "_min", "_max"],
    NestedIntNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    NestedFloatNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedDateTimeFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedDateTimeWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
    NestedDateTimeNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedDateTimeNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
    NestedEnumEnum_GenderFilter: ["equals", "in", "notIn", "not"],
    NestedEnumEnum_StatusFilter: ["equals", "in", "notIn", "not"],
    NestedEnumEnum_GenderWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NestedEnumEnum_StatusWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NestedIntWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    NestedFloatFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedFloatWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    NestedEnumEnum_GoalFilter: ["equals", "in", "notIn", "not"],
    NestedEnumEnum_GoalWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    UserCreateWithoutAccountsInput: ["id", "name", "email", "emailVerified", "image", "sessions", "Coach", "Athlete", "Admin"],
    UserCreateOrConnectWithoutAccountsInput: ["where", "create"],
    UserUpsertWithoutAccountsInput: ["update", "create"],
    UserUpdateWithoutAccountsInput: ["id", "name", "email", "emailVerified", "image", "sessions", "Coach", "Athlete", "Admin"],
    UserCreateWithoutSessionsInput: ["id", "name", "email", "emailVerified", "image", "accounts", "Coach", "Athlete", "Admin"],
    UserCreateOrConnectWithoutSessionsInput: ["where", "create"],
    UserUpsertWithoutSessionsInput: ["update", "create"],
    UserUpdateWithoutSessionsInput: ["id", "name", "email", "emailVerified", "image", "accounts", "Coach", "Athlete", "Admin"],
    AccountCreateWithoutUserInput: ["id", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state"],
    AccountCreateOrConnectWithoutUserInput: ["where", "create"],
    AccountCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
    SessionCreateWithoutUserInput: ["id", "sessionToken", "expires"],
    SessionCreateOrConnectWithoutUserInput: ["where", "create"],
    SessionCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
    CoachCreateWithoutUserInput: ["id", "name", "lastname", "schoolId", "description", "scheduler", "KnowTrainer", "gender", "status", "WorkoutToDo", "GlobalWorkout"],
    CoachCreateOrConnectWithoutUserInput: ["where", "create"],
    AthleteCreateWithoutUserInput: ["id", "name", "lastname", "schoolId", "gender", "height", "Weights", "DoneWorkouts", "WorkoutstToDo"],
    AthleteCreateOrConnectWithoutUserInput: ["where", "create"],
    AdminCreateWithoutUserInput: ["id", "name", "lastname", "schoolId", "gender"],
    AdminCreateOrConnectWithoutUserInput: ["where", "create"],
    AccountUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
    AccountUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
    AccountUpdateManyWithWhereWithoutUserInput: ["where", "data"],
    AccountScalarWhereInput: ["AND", "OR", "NOT", "id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state"],
    SessionUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
    SessionUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
    SessionUpdateManyWithWhereWithoutUserInput: ["where", "data"],
    SessionScalarWhereInput: ["AND", "OR", "NOT", "id", "sessionToken", "userId", "expires"],
    CoachUpsertWithoutUserInput: ["update", "create"],
    CoachUpdateWithoutUserInput: ["id", "name", "lastname", "schoolId", "description", "scheduler", "KnowTrainer", "gender", "status", "WorkoutToDo", "GlobalWorkout"],
    AthleteUpsertWithoutUserInput: ["update", "create"],
    AthleteUpdateWithoutUserInput: ["id", "name", "lastname", "schoolId", "gender", "height", "Weights", "DoneWorkouts", "WorkoutstToDo"],
    AdminUpsertWithoutUserInput: ["update", "create"],
    AdminUpdateWithoutUserInput: ["id", "name", "lastname", "schoolId", "gender"],
    UserCreateWithoutCoachInput: ["id", "name", "email", "emailVerified", "image", "accounts", "sessions", "Athlete", "Admin"],
    UserCreateOrConnectWithoutCoachInput: ["where", "create"],
    WorkoutToDoCreateWithoutCoachInput: ["id", "athlete", "date", "indications", "goal", "goalvalue"],
    WorkoutToDoCreateOrConnectWithoutCoachInput: ["where", "create"],
    WorkoutToDoCreateManyCoachInputEnvelope: ["data", "skipDuplicates"],
    GlobalWorkoutCreateWithoutCoachInput: ["id", "indications", "goal", "goalvalue"],
    GlobalWorkoutCreateOrConnectWithoutCoachInput: ["where", "create"],
    GlobalWorkoutCreateManyCoachInputEnvelope: ["data", "skipDuplicates"],
    UserUpsertWithoutCoachInput: ["update", "create"],
    UserUpdateWithoutCoachInput: ["id", "name", "email", "emailVerified", "image", "accounts", "sessions", "Athlete", "Admin"],
    WorkoutToDoUpsertWithWhereUniqueWithoutCoachInput: ["where", "update", "create"],
    WorkoutToDoUpdateWithWhereUniqueWithoutCoachInput: ["where", "data"],
    WorkoutToDoUpdateManyWithWhereWithoutCoachInput: ["where", "data"],
    WorkoutToDoScalarWhereInput: ["AND", "OR", "NOT", "id", "date", "indications", "goal", "goalvalue", "coachId", "athleteId"],
    GlobalWorkoutUpsertWithWhereUniqueWithoutCoachInput: ["where", "update", "create"],
    GlobalWorkoutUpdateWithWhereUniqueWithoutCoachInput: ["where", "data"],
    GlobalWorkoutUpdateManyWithWhereWithoutCoachInput: ["where", "data"],
    GlobalWorkoutScalarWhereInput: ["AND", "OR", "NOT", "id", "indications", "goal", "goalvalue", "coachId"],
    UserCreateWithoutAthleteInput: ["id", "name", "email", "emailVerified", "image", "accounts", "sessions", "Coach", "Admin"],
    UserCreateOrConnectWithoutAthleteInput: ["where", "create"],
    WeightCreateWithoutAthleteInput: ["id", "weight", "date"],
    WeightCreateOrConnectWithoutAthleteInput: ["where", "create"],
    WeightCreateManyAthleteInputEnvelope: ["data", "skipDuplicates"],
    DoneWorkoutCreateWithoutAthleteInput: ["id", "date", "calories", "time", "distance", "intensity"],
    DoneWorkoutCreateOrConnectWithoutAthleteInput: ["where", "create"],
    DoneWorkoutCreateManyAthleteInputEnvelope: ["data", "skipDuplicates"],
    WorkoutToDoCreateWithoutAthleteInput: ["id", "coach", "date", "indications", "goal", "goalvalue"],
    WorkoutToDoCreateOrConnectWithoutAthleteInput: ["where", "create"],
    WorkoutToDoCreateManyAthleteInputEnvelope: ["data", "skipDuplicates"],
    UserUpsertWithoutAthleteInput: ["update", "create"],
    UserUpdateWithoutAthleteInput: ["id", "name", "email", "emailVerified", "image", "accounts", "sessions", "Coach", "Admin"],
    WeightUpsertWithWhereUniqueWithoutAthleteInput: ["where", "update", "create"],
    WeightUpdateWithWhereUniqueWithoutAthleteInput: ["where", "data"],
    WeightUpdateManyWithWhereWithoutAthleteInput: ["where", "data"],
    WeightScalarWhereInput: ["AND", "OR", "NOT", "id", "weight", "date", "athleteId"],
    DoneWorkoutUpsertWithWhereUniqueWithoutAthleteInput: ["where", "update", "create"],
    DoneWorkoutUpdateWithWhereUniqueWithoutAthleteInput: ["where", "data"],
    DoneWorkoutUpdateManyWithWhereWithoutAthleteInput: ["where", "data"],
    DoneWorkoutScalarWhereInput: ["AND", "OR", "NOT", "id", "date", "calories", "time", "distance", "intensity", "athleteId"],
    WorkoutToDoUpsertWithWhereUniqueWithoutAthleteInput: ["where", "update", "create"],
    WorkoutToDoUpdateWithWhereUniqueWithoutAthleteInput: ["where", "data"],
    WorkoutToDoUpdateManyWithWhereWithoutAthleteInput: ["where", "data"],
    UserCreateWithoutAdminInput: ["id", "name", "email", "emailVerified", "image", "accounts", "sessions", "Coach", "Athlete"],
    UserCreateOrConnectWithoutAdminInput: ["where", "create"],
    UserUpsertWithoutAdminInput: ["update", "create"],
    UserUpdateWithoutAdminInput: ["id", "name", "email", "emailVerified", "image", "accounts", "sessions", "Coach", "Athlete"],
    AthleteCreateWithoutWeightsInput: ["id", "name", "lastname", "schoolId", "gender", "height", "user", "DoneWorkouts", "WorkoutstToDo"],
    AthleteCreateOrConnectWithoutWeightsInput: ["where", "create"],
    AthleteUpsertWithoutWeightsInput: ["update", "create"],
    AthleteUpdateWithoutWeightsInput: ["id", "name", "lastname", "schoolId", "gender", "height", "user", "DoneWorkouts", "WorkoutstToDo"],
    AthleteCreateWithoutDoneWorkoutsInput: ["id", "name", "lastname", "schoolId", "gender", "height", "user", "Weights", "WorkoutstToDo"],
    AthleteCreateOrConnectWithoutDoneWorkoutsInput: ["where", "create"],
    AthleteUpsertWithoutDoneWorkoutsInput: ["update", "create"],
    AthleteUpdateWithoutDoneWorkoutsInput: ["id", "name", "lastname", "schoolId", "gender", "height", "user", "Weights", "WorkoutstToDo"],
    CoachCreateWithoutWorkoutToDoInput: ["id", "name", "lastname", "schoolId", "description", "scheduler", "KnowTrainer", "gender", "status", "user", "GlobalWorkout"],
    CoachCreateOrConnectWithoutWorkoutToDoInput: ["where", "create"],
    AthleteCreateWithoutWorkoutstToDoInput: ["id", "name", "lastname", "schoolId", "gender", "height", "user", "Weights", "DoneWorkouts"],
    AthleteCreateOrConnectWithoutWorkoutstToDoInput: ["where", "create"],
    CoachUpsertWithoutWorkoutToDoInput: ["update", "create"],
    CoachUpdateWithoutWorkoutToDoInput: ["id", "name", "lastname", "schoolId", "description", "scheduler", "KnowTrainer", "gender", "status", "user", "GlobalWorkout"],
    AthleteUpsertWithoutWorkoutstToDoInput: ["update", "create"],
    AthleteUpdateWithoutWorkoutstToDoInput: ["id", "name", "lastname", "schoolId", "gender", "height", "user", "Weights", "DoneWorkouts"],
    CoachCreateWithoutGlobalWorkoutInput: ["id", "name", "lastname", "schoolId", "description", "scheduler", "KnowTrainer", "gender", "status", "user", "WorkoutToDo"],
    CoachCreateOrConnectWithoutGlobalWorkoutInput: ["where", "create"],
    CoachUpsertWithoutGlobalWorkoutInput: ["update", "create"],
    CoachUpdateWithoutGlobalWorkoutInput: ["id", "name", "lastname", "schoolId", "description", "scheduler", "KnowTrainer", "gender", "status", "user", "WorkoutToDo"],
    AccountCreateManyUserInput: ["id", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state"],
    SessionCreateManyUserInput: ["id", "sessionToken", "expires"],
    AccountUpdateWithoutUserInput: ["id", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state"],
    SessionUpdateWithoutUserInput: ["id", "sessionToken", "expires"],
    WorkoutToDoCreateManyCoachInput: ["id", "date", "indications", "goal", "goalvalue", "athleteId"],
    GlobalWorkoutCreateManyCoachInput: ["id", "indications", "goal", "goalvalue"],
    WorkoutToDoUpdateWithoutCoachInput: ["id", "athlete", "date", "indications", "goal", "goalvalue"],
    GlobalWorkoutUpdateWithoutCoachInput: ["id", "indications", "goal", "goalvalue"],
    WeightCreateManyAthleteInput: ["id", "weight", "date"],
    DoneWorkoutCreateManyAthleteInput: ["id", "date", "calories", "time", "distance", "intensity"],
    WorkoutToDoCreateManyAthleteInput: ["id", "date", "indications", "goal", "goalvalue", "coachId"],
    WeightUpdateWithoutAthleteInput: ["id", "weight", "date"],
    DoneWorkoutUpdateWithoutAthleteInput: ["id", "date", "calories", "time", "distance", "intensity"],
    WorkoutToDoUpdateWithoutAthleteInput: ["id", "coach", "date", "indications", "goal", "goalvalue"]
};
function applyInputTypesEnhanceMap(inputTypesEnhanceMap) {
    for (const inputTypeEnhanceMapKey of Object.keys(inputTypesEnhanceMap)) {
        const inputTypeName = inputTypeEnhanceMapKey;
        const typeConfig = inputTypesEnhanceMap[inputTypeName];
        const typeClass = inputTypes[inputTypeName];
        const typeTarget = typeClass.prototype;
        applyTypeClassEnhanceConfig(typeConfig, typeClass, typeTarget, inputsInfo[inputTypeName]);
    }
}
exports.applyInputTypesEnhanceMap = applyInputTypesEnhanceMap;
