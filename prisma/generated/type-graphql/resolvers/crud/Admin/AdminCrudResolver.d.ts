import { GraphQLResolveInfo } from "graphql";
import { AggregateAdminArgs } from "./args/AggregateAdminArgs";
import { CreateAdminArgs } from "./args/CreateAdminArgs";
import { CreateManyAdminArgs } from "./args/CreateManyAdminArgs";
import { DeleteAdminArgs } from "./args/DeleteAdminArgs";
import { DeleteManyAdminArgs } from "./args/DeleteManyAdminArgs";
import { FindFirstAdminArgs } from "./args/FindFirstAdminArgs";
import { FindManyAdminArgs } from "./args/FindManyAdminArgs";
import { FindUniqueAdminArgs } from "./args/FindUniqueAdminArgs";
import { GroupByAdminArgs } from "./args/GroupByAdminArgs";
import { UpdateAdminArgs } from "./args/UpdateAdminArgs";
import { UpdateManyAdminArgs } from "./args/UpdateManyAdminArgs";
import { UpsertAdminArgs } from "./args/UpsertAdminArgs";
import { Admin } from "../../../models/Admin";
import { AdminGroupBy } from "../../outputs/AdminGroupBy";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateAdmin } from "../../outputs/AggregateAdmin";
export declare class AdminCrudResolver {
    admin(ctx: any, info: GraphQLResolveInfo, args: FindUniqueAdminArgs): Promise<Admin | null>;
    findFirstAdmin(ctx: any, info: GraphQLResolveInfo, args: FindFirstAdminArgs): Promise<Admin | null>;
    admins(ctx: any, info: GraphQLResolveInfo, args: FindManyAdminArgs): Promise<Admin[]>;
    createAdmin(ctx: any, info: GraphQLResolveInfo, args: CreateAdminArgs): Promise<Admin>;
    createManyAdmin(ctx: any, info: GraphQLResolveInfo, args: CreateManyAdminArgs): Promise<AffectedRowsOutput>;
    deleteAdmin(ctx: any, info: GraphQLResolveInfo, args: DeleteAdminArgs): Promise<Admin | null>;
    updateAdmin(ctx: any, info: GraphQLResolveInfo, args: UpdateAdminArgs): Promise<Admin | null>;
    deleteManyAdmin(ctx: any, info: GraphQLResolveInfo, args: DeleteManyAdminArgs): Promise<AffectedRowsOutput>;
    updateManyAdmin(ctx: any, info: GraphQLResolveInfo, args: UpdateManyAdminArgs): Promise<AffectedRowsOutput>;
    upsertAdmin(ctx: any, info: GraphQLResolveInfo, args: UpsertAdminArgs): Promise<Admin>;
    aggregateAdmin(ctx: any, info: GraphQLResolveInfo, args: AggregateAdminArgs): Promise<AggregateAdmin>;
    groupByAdmin(ctx: any, info: GraphQLResolveInfo, args: GroupByAdminArgs): Promise<AdminGroupBy[]>;
}
